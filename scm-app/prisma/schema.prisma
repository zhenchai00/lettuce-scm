// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FARMER
  DISTRIBUTOR
  RETAILER
}

enum ProduceType {
  BUTTERHEAD
  LOOSELEAF
  OAKLEAF
  ROMAINE
  SPINACH
}

enum ShipmentStatus {
  ORDERED
  OUTOFDELIVERY
  DELIVERED
  CANCELLED
}

enum EventType {
  PLANTED           // planting event date recorded
  HARVESTED         // harvest event date recorded
  SHIPPED           // shipment sent 
  DELIVERED         // shipment delivered
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  passwordHash  String
  role          UserRole
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // relations
  batches       BatchProduct[] @relation("FarmerBatches")
  shipmentsFrom Shipment[] @relation("SentShipments")
  shipmentsTo   Shipment[] @relation("ReceivedShipments")
  inventory     Inventory[]
  events        ProductEvent[]
}

model BatchProduct {
  id            String    @id @default(cuid())
  produceType   ProduceType
  description   String?
  plantingDate  DateTime
  harvestDate   DateTime? 
  quantity      Int?
  blockchainTx  String?
  acquired      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relations
  farmer        User      @relation("FarmerBatches", fields: [farmerId], references: [id])
  farmerId      String
  shipments     Shipment[]
  inventory     Inventory[]
  events        ProductEvent[]
}

model Shipment {
  id            String          @id @default(cuid())
  status        ShipmentStatus  @default(ORDERED)
  quantity      Int?
  trackingKey   String?         // generated by retailer for public access
  shippedDate   DateTime?
  deliveryDate  DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // relation
  batch      BatchProduct @relation(fields: [batchId], references: [id])
  batchId    String

  fromUser   User?      @relation("SentShipments", fields: [fromUserId], references: [id])
  fromUserId String

  toUser     User?      @relation("ReceivedShipments", fields: [toUserId], references: [id])
  toUserId   String

  events     ProductEvent[]

  @@index([batchId], name: "idx_shipment_batch") // Index for faster lookups by batch
  @@index([fromUserId], name: "idx_shipment_from_user") // Index for faster lookups by user sending the shipment
  @@index([toUserId], name: "idx_shipment_to_user") // Index for faster lookups by user receiving the shipment
}
model Inventory {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  batch         BatchProduct  @relation(fields: [batchId], references: [id])
  batchId       String
  quantity      Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([userId, batchId], name: "unique_inventory")
  @@index([userId], name: "idx_inventory_user")
  @@index([batchId], name: "idx_inventory_batch")
}

model ProductEvent {
  id          String      @id @default(cuid())
  eventType   EventType
  timestamp   DateTime    @default(now())
  txHash      String?     @unique         // optional blockchain transaction hash
  quantity    Int?                        // quantity affected by the event
  description String?                     // optional description of the event

  // relations
  batch       BatchProduct @relation(fields: [batchId], references: [id])
  batchId     String

  shipment    Shipment?    @relation(fields: [shipmentId], references: [id])
  shipmentId  String?

  user        User         @relation(fields: [userId], references: [id])
  userId      String

  @@index([batchId], name: "idx_event_batch") // Index for faster lookups by batch
  @@index([shipmentId], name: "idx_event_shipment") // Index for faster lookups by shipment
  @@index([userId], name: "idx_event_user") // Index for faster lookups by user
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  message   String
  createdAt DateTime @default(now())

  @@index([createdAt], name: "idx_contact_created_at") // Index for faster lookups by creation date
}