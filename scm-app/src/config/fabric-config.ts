import * as path from "path";

const BASE_APP_DIR = process.cwd();
const PROJECT_ROOT = path.resolve(BASE_APP_DIR, '..'); 
const FABRIC_NETWORK_ROOT = path.join(PROJECT_ROOT, "fabric-network");
const TEST_NETWORK_PATH = path.join(
    FABRIC_NETWORK_ROOT,
    "test-network"
);

console.log("Fabric network path:", PROJECT_ROOT, FABRIC_NETWORK_ROOT, TEST_NETWORK_PATH);

export const fabricConfig = {
    CHANNEL_NAME: process.env.CHANNEL_NAME || "mychannel",
    CHAINCODE_NAME: process.env.CHAINCODE_NAME || "basic",
    MSP_ID: process.env.MSP_ID || "Org1MSP",

    // User identity to connect with. Make sure this user exists and its crypto material is available.
    // For test-network, 'User1@org1.example.com' is a common choice.
    USER_IDENTITY: process.env.USER_IDENTITY || "User1@org1.example.com",
    ORG_NAME: process.env.ORG_NAME || "org1.example.com",
    PEER_NAME: process.env.PEER_NAME || "peer0.org1.example.com",
    PEER_ENDPOINT: process.env.PEER_ENDPOINT || "localhost:7051", // Gateway peer address
    PEER_HOST_ALIAS: process.env.PEER_HOST_ALIAS || "peer0.org1.example.com", // For TLS hostname override

    // Paths to crypto materials. These should point to the actual files generated by your Fabric network.
    CRYPTO_PATH: path.resolve(
        TEST_NETWORK_PATH,
        "organizations",
        "peerOrganizations",
        "org1.example.com"
    ),

    getKeyDirectoryPath: (userIdentity: string) => {
        return path.resolve(
            fabricConfig.CRYPTO_PATH,
            "users",
            userIdentity,
            "msp",
            "keystore"
        );
    },
    getCertDirectoryPath: (userIdentity: string) => {
        return path.resolve(
            fabricConfig.CRYPTO_PATH,
            "users",
            userIdentity,
            "msp",
            "signcerts"
        );
    },
    getTlsCertPath: (peerName: string) => {
        return path.resolve(
            fabricConfig.CRYPTO_PATH,
            "peers",
            peerName,
            "tls",
            "ca.crt"
        );
    },
};
